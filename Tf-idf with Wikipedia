import os
os.chdir('F:\ANSHUL\Wikipedia articles')
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords
from gensim.corpora.dictionary import Dictionary
from gensim.models.tfidfmodel import TfidfModel
wiki=["wiki_text_debugging.txt","wiki_text_language.txt","wiki_text_software.txt","wiki_text_reversing.txt","wiki_text_computer.txt"]
articles = []
def preprocess(text):
    with open(text,"r",encoding="utf8") as f:
        mag = f.read()
    tokens = word_tokenize(mag)
    lower_tokens = [t.lower() for t in tokens]
    alpha_only = [t for t in lower_tokens if t.isalpha()]
    no_stops = [t for t in alpha_only if t not in stopwords.words('english')]
    wordnet_lemmatizer = WordNetLemmatizer()
    lemmatized = [wordnet_lemmatizer.lemmatize(t) for t in no_stops]
    return lemmatized
for a in wiki:
    ar = preprocess(a)
    articles.append(ar)
dictionary = Dictionary(articles)
corpus = [dictionary.doc2bow(article) for article in articles]
doc = corpus[3]
# Create a new TfidfModel using the corpus: tfidf
tfidf = TfidfModel(corpus)
# Calculate the tfidf weights of doc: tfidf_weights
tfidf_weights = tfidf[doc]
# Print the first five weights
print(tfidf_weights[:5])
# Sort the weights from highest to lowest: sorted_tfidf_weights
sorted_tfidf_weights = sorted(tfidf_weights, key=lambda w: w[1], reverse=True)
# Print the top 5 weighted words
for term_id, weight in sorted_tfidf_weights[:5]:
    print(dictionary.get(term_id), weight)
