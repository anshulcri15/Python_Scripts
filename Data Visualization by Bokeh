import os
os.chdir('C:\Documents\AI & ML\Datacamp')
import pandas as pd
from bokeh.io import output_file, show, curdoc
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, CategoricalColorMapper, Slider, HoverTool, Select
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row
df = pd.read_csv('gapminder_tidy.csv',index_col='Year')
# Make the ColumnDataSource: source
source = ColumnDataSource(data={'x': df.loc[1970].fertility, 'y':df.loc[1970].life, 'country':df.loc[1970].Country, 
                                                       'pop':(df.loc[1970].population / 20000000) + 2, 'region':df.loc[1970].region})
# Define the callback: update_plot
def update_plot(attr, old, new):
    # Read the current value off the slider and 2 dropdowns: yr, x, y
    yr = slider.value
    x = x_select.value
    y = y_select.value
    # Label axes of plot
    plot.xaxis.axis_label = x
    plot.yaxis.axis_label = y
    # Set new_data
    new_data = {'x':df.loc[yr][x], 'y':df.loc[yr][y], 'country':df.loc[yr].Country,
                          'pop':(df.loc[yr].population / 20000000) + 2, 'region':df.loc[yr].region}
    # Assign new_data to source.data
    source.data = new_data
    # Set the range of all axes
    plot.x_range.start = min(df[x])
    plot.x_range.end = max(df[x])
    plot.y_range.start = min(df[y])
    plot.y_range.end = max(df[y])
    # Add title to plot
    plot.title.text = 'Gapminder data for %d' % yr
# Make a slider object: slider
slider = Slider(start=1970,end=2010,step=1,value=1970,title='Year')
# Attach the callback to the 'value' property of slider
slider.on_change('value',update_plot)
# Create a dropdown Select widget for the x data: x_select
x_select = Select(
    options=['fertility', 'life', 'child_mortality', 'gdp'],
    value='fertility',
    title='x-axis data')
# Attach the update_plot callback to the 'value' property of x_select
x_select.on_change('value', update_plot)
# Create a dropdown Select widget for the y data: y_select
y_select = Select(
    options=['fertility', 'life', 'child_mortality', 'gdp'],
    value='life',
    title='y-axis data')
# Attach the update_plot callback to the 'value' property of y_select
y_select.on_change('value',update_plot)
# Make a list of the unique values from the region column: regions_list
regions_list = df.region.unique().tolist()
# Make a color mapper: color_mapper
color_mapper = CategoricalColorMapper(factors=regions_list, palette=Spectral6)
# Save the minimum and maximum values of the fertility column: xmin, xmax
xmin, xmax = min(df.fertility), max(df.fertility)
# Save the minimum and maximum values of the life expectancy column: ymin, ymax
ymin, ymax = min(df.life), max(df.life)
# Create the figure: plot
plot = figure(title='Gapminder Data for 1970',plot_height=400, plot_width=700, x_range=(xmin, xmax), y_range=(ymin,                                        ymax), x_axis_label='Fertility (children per woman)',y_axis_label='Life Expectancy (years)')
# Add the color mapper to the circle glyph
plot.circle(x='x', y='y', fill_alpha=0.8, source=source,
                  color=dict(field='region', transform=color_mapper),legend='region')
# Set the legend.location attribute of the plot to 'top_right'
plot.legend.location = 'top_right'
# Create a HoverTool: hover
hover = HoverTool(tooltips=[('Country', '@country')])
# Add the HoverTool to the plot
plot.add_tools(hover)
# Create layout and add to current document
layout = row(widgetbox(slider, x_select, y_select), plot)
curdoc().add_root(layout)
